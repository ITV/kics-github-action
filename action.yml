# action.yml
name: "KICS Github Action"
description: "Run KICS scan against IaC projects"
inputs:
  token:
    description: "The GITHUB_TOKEN for the current workflow run"
    required: false
    default: ${{github.token}}
  enable_annotations:
    required: false
    default: "true"
    description: "Enable annotations report"
  enable_comments:
    required: false
    default: "false"
    description: "Enable pull request report comments"
  enable_jobs_summary:
    required: false
    default: "false"
    description: "Enable report as jobs summary"
  comments_with_queries:
    required: false
    default: "false"
    description: "Add queries in th pull request report comments (available when enable_comments = true)"
  excluded_column_for_comments_with_queries:
    required: false
    default: "description_id,similarity_id,search_line,search_value"
    description: "Excluded columns for the comment with queries, accepts a comma separated list"
  path:
    description: "paths to a file or directories to scan, accepts a comma separated list"
    required: true
  ignore_on_exit:
    description: "defines which non-zero exit codes should be ignored (all, results, errors, none)"
    required: false
  fail_on:
    description: "comma separated list of which severities returns exit code !=0"
    required: false
  timeout:
    description: "number of seconds the query has to execute before being canceled"
    required: false
  profiling:
    description: "turns on profiler that prints resource consumption in the logs during the execution (CPU, MEM)"
    required: false
  config_path:
    description: "path to configuration file"
    required: false
  platform_type:
    description: "case insensitive list of platform types to scan"
    required: false
  exclude_paths:
    description: "exclude paths from scan, supports glob, quoted comma separated string example: './shouldNotScan/*,somefile.txt'"
    required: false
  exclude_queries:
    description: exclude queries by providing the query ID
    required: false
  exclude_categories:
    description: exclude categories by providing its name, can be provided multiple times or as a comma separated string
    required: false
  exclude_results:
    description: "exclude results by providing the similarity ID of a result"
    required: false
  exclude_severities:
    description: "exclude results by providing the severity of a result"
    required: false
  exclude_gitignore:
    description: "disables the exclusion of paths specified within .gitignore file"
    required: false
  output_formats:
    description: "formats in which the results report will be exported (json, sarif)"
    required: false
  output_path:
    description: "directory to store results report"
    required: false
  payload_path:
    description: "file path to store source internal representation in JSON format"
    required: false
  queries:
    description: 'path to directory with queries (default "./assets/queries")'
    required: false
  secrets_regexes_path:
    description: "path to secrets regex rules configuration file"
    required: false
  libraries_path:
    description: "path to directory with Rego libraries"
    required: false
  disable_full_descriptions:
    description: "disable request for full descriptions and use default vulnerability descriptions"
    required: false
  disable_secrets:
    description: "disable secrets detection"
    required: false
  type:
    description: "case insensitive comma-separated list of platform types to scan (Ansible, AzureResourceManager, CloudFormation, Dockerfile, Kubernetes, OpenAPI, Terraform)"
    required: false
  verbose:
    description: "verbose scan"
    required: false
  include_queries:
    description: "comma separated list of queries ID's to include, cannot be provided with query exclusion flags"
    required: false
  bom:
    description: "include bill of materials (BoM) in results output"
    required: false
  cloud_provider:
    description: "list of cloud providers to scan (alicloud, aws, azure, gcp)"
    required: false
  use-ecr-registry:
    description: "Whether to use AWS ECR as the container registry"
    required: false
    default: "false"
branding:
  icon: "shield"
  color: "green"
runs:
  using: "composite"
  steps:
    - name: Run KICS Scan
      shell: bash
      run: |
        if [[ "${{ inputs.use-ecr-registry }}" == "true" ]]; then
          IMAGE="655028521085.dkr.ecr.eu-west-1.amazonaws.com/cp-gha-kics:0.0.1"
        else
          IMAGE="ghcr.io/itv/kics-github-action:develop"
        fi

        docker run --quiet --name kics-scan \
        -v "${{ github.workspace }}":"${{ github.workspace }}" \
        -w "${{ github.workspace }}" \
        -e GITHUB_ACTION \
        -e GITHUB_ACTOR \
        -e GITHUB_API_URL \
        -e GITHUB_BASE_REF \
        -e GITHUB_EVENT_NAME \
        -e GITHUB_EVENT_PATH="${{ github.event_path }}" \
        -e GITHUB_GRAPHQL_URL \
        -e GITHUB_HEAD_REF \
        -e GITHUB_JOB \
        -e GITHUB_REF \
        -e GITHUB_REPOSITORY \
        -e GITHUB_RUN_ID \
        -e GITHUB_RUN_NUMBER \
        -e GITHUB_SERVER_URL \
        -e GITHUB_SHA \
        -e GITHUB_TOKEN="${{ inputs.token }}" \
        -e GITHUB_WORKFLOW \
        -e GITHUB_WORKSPACE="${{ github.workspace }}" \
        -e RUNNER_OS \
        -e RUNNER_TEMP \
        -e RUNNER_TOOL_CACHE \
        -e INPUT_TOKEN="${{ inputs.token }}" \
        -e INPUT_ENABLE_ANNOTATIONS="${{ inputs.enable_annotations }}" \
        -e INPUT_ENABLE_COMMENTS="${{ inputs.enable_comments }}" \
        -e INPUT_ENABLE_JOBS_SUMMARY="${{ inputs.enable_jobs_summary }}" \
        -e INPUT_COMMENTS_WITH_QUERIES="${{ inputs.comments_with_queries }}" \
        -e INPUT_EXCLUDED_COLUMNS_FOR_COMMENTS_WITH_QUERIES="${{ inputs.excluded_column_for_comments_with_queries }}" \
        -e INPUT_PATH="${{ inputs.path }}" \
        -e INPUT_IGNORE_ON_EXIT="${{ inputs.ignore_on_exit }}" \
        -e INPUT_FAIL_ON="${{ inputs.fail_on }}" \
        -e INPUT_TIMEOUT="${{ inputs.timeout }}" \
        -e INPUT_PROFILING="${{ inputs.profiling }}" \
        -e INPUT_CONFIG_PATH="${{ inputs.config_path }}" \
        -e INPUT_PLATFORM_TYPE="${{ inputs.platform_type }}" \
        -e INPUT_EXCLUDE_PATHS="${{ inputs.exclude_paths }}" \
        -e INPUT_EXCLUDE_QUERIES="${{ inputs.exclude_queries }}" \
        -e INPUT_EXCLUDE_CATEGORIES="${{ inputs.exclude_categories }}" \
        -e INPUT_EXCLUDE_RESULTS="${{ inputs.exclude_results }}" \
        -e INPUT_EXCLUDE_SEVERITIES="${{ inputs.exclude_severities }}" \
        -e INPUT_EXCLUDE_GITIGNORE="${{ inputs.exclude_gitignore }}" \
        -e INPUT_OUTPUT_FORMATS="${{ inputs.output_formats }}" \
        -e INPUT_OUTPUT_PATH="${{ inputs.output_path }}" \
        -e INPUT_PAYLOAD_PATH="${{ inputs.payload_path }}" \
        -e INPUT_QUERIES="${{ inputs.queries }}" \
        -e INPUT_SECRETS_REGEXES_PATH="${{ inputs.secrets_regexes_path }}" \
        -e INPUT_LIBRARIES_PATH="${{ inputs.libraries_path }}" \
        -e INPUT_DISABLE_FULL_DESCRIPTIONS="${{ inputs.disable_full_descriptions }}" \
        -e INPUT_DISABLE_SECRETS="${{ inputs.disable_secrets }}" \
        -e INPUT_TYPE="${{ inputs.type }}" \
        -e INPUT_VERBOSE="${{ inputs.verbose }}" \
        -e INPUT_INCLUDE_QUERIES="${{ inputs.include_queries }}" \
        -e INPUT_BOM="${{ inputs.bom }}" \
        -e INPUT_CLOUD_PROVIDER="${{ inputs.cloud_provider }}" \
        $IMAGE